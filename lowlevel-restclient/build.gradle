/*****************************************************************************
 *         plugins                                                      *
 *****************************************************************************/

plugins {
    id 'io.github.stewseo.java-conventions'
}

group = 'io.github.stewseo'

/*****************************************************************************
 *         java                                                             *
 *****************************************************************************/

java {
    withJavadocJar()
    withSourcesJar()
}

jar {
    archiveFileName.set('lowlevel-restclient')
    archiveVersion.set(version)

    manifest {
        attributes("Implementation-Title": archiveFileName,
                "Implementation-Version": archiveVersion)
    }

    from {
        configurations.compileClasspath.filter { it.exists() }.collect { it.isDirectory() ? it : zipTree(it) }
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

ext {
    mockitoCoreVersion = '4.4.0'
    byteBuddyVersion = '1.12.9'
    objenesis = '3.2'
}

/*****************************************************************************
 *         :lowlevel-restclient dependencies                         *
 *****************************************************************************/

dependencies {

    // apache http components
    api "org.apache.httpcomponents:httpclient:${httpclientVersion}"
    api "org.apache.httpcomponents:httpcore:${httpcoreVersion}"
    api "org.apache.httpcomponents:httpasyncclient:${httpasyncclientVersion}"
    api "org.apache.httpcomponents:httpcore-nio:${httpcoreVersion}"

    implementation "com.carrotsearch.randomizedtesting:randomizedtesting-runner:${slf4jVersion}"
    implementation "junit:junit:${jUnit4Version}"
    implementation "org.hamcrest:hamcrest:${hamcrestVersion}"

    // mockito
    implementation "org.mockito:mockito-core:${mockitoCoreVersion}"
    implementation "net.bytebuddy:byte-buddy:${byteBuddyVersion}"
    implementation "org.objenesis:objenesis:${objenesis}"
}

tasks.register('lowlevel-restclient-print-test') {
    doLast {
        println 'lowlevel-restclient print test' + ', rootProject.path: ' + rootProject.path + ' project path: ' + project.path
    }
}

/*****************************************************************************
 *         testing                                                         *
 *****************************************************************************/

test {
    filter {
        excludeTestsMatching "io.*.*.lowlevel.restclient.*"
    }
}

/*****************************************************************************
 *         publishing                                                       *
 *****************************************************************************/





