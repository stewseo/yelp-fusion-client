import java.text.SimpleDateFormat

plugins {
    id 'java-library'
//    id "com.dorongold.task-tree" version "2.1.0"
    id 'maven-publish'
    id 'signing'
    id 'idea'
    id 'jacoco'
    id "com.github.dawnwords.jacoco.badge" version "0.2.4"
    id "org.ajoberstar.grgit" version "1.7.2"
}


group = 'io.github.stewseo'

version = file("$projectDir/config/version.txt").text.trim()

task versionTxt()  {
    doLast {
        new File(projectDir, "config/version.txt").text = """
Version: $version
Revision: ${grgit.head().abbreviatedId}
Buildtime: ${new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date())}
Application-name: yelp-fusion java client
"""
    }
}

if (hasProperty('version')) {
    version = file("$projectDir/config/version.txt").text.trim()
}

java {
    sourceCompatibility = "17"
    targetCompatibility = "17"
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

jar {
    archiveFileName = 'yelp-fusion-client'
    archiveVersion = '1.0.7'
    from {
        configurations.compileClasspath.filter{ it.exists() }.collect { it.isDirectory() ? it : zipTree(it) }
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

publishing {

    repositories {
        maven {
            name = "ossrh"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = findProperty('ossrhUsername')
                password = findProperty('ossrhPassword')
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                Node pomNode = asNode()
                pomNode.dependencies.'*'.findAll() {
                    it.artifactId.text() == 'elasticsearch-java'
                }.each() {
                    it.parent().remove(it)
                }
            }

            pom {
                name = 'YelpFusionJavaClient'
                artifactId = 'yelp-fusion-client'
                setGroupId "io.github.stewseo"
                packaging = 'jar'
                description = 'java client to build api objects, handle http transport, and parse/deserialize/serialize json to/from json'
                url = 'https://github.com/stewseo/yelp-fusion-client'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/stewseo/yelp-fusion-client.git'
                    developerConnection = 'scm:git:ssh://github.com/stewseo/stewseo.github.io.git'
                    url = 'https://github.com/stewseo/yelp-fusion-client.git'
                }
                developers {
                    developer {
                        id = 'stewseo'
                        name = 'Stew seo'
                        email = 'stewart.s.seo@gmail.com'
                    }
                }
            }
        }
    }
}

javadoc {
    source = sourceSets.main.allJava
}

javadoc.options.addStringOption('Xdoclint:none', '-quiet')

signing {
    sign publishing.publications.mavenJava
}


repositories {
    mavenCentral()
}

ext {
    // elasticsearch
    elasticsearchVersion = "8.5.2"

    // json
    jacksonVersion = "2.12.3"
    jakartaVersion = '2.0.1'
    jakartaJsonBindVersion = '2.0.0'
    parssonVersion = '1.0.0'

    // logging
    slf4jVersion = '2.0.4'
    logbackVersion = '1.4.1'

    // testing
    jUnitVersion = "5.9.0"
}

dependencies {
//    api project(":lowlevel-restclient")
    api files("lowlevel-restclient/build/libs/lowlevel-restclient.jar")
    api files ("temporaldata/build/libs/temporaldata.jar")

    // elasticsearch
    implementation("co.elastic.clients:elasticsearch-java:${elasticsearchVersion}")

    // json
    api("org.eclipse.parsson:parsson:${parssonVersion}")
    api("jakarta.json:jakarta.json-api:${jakartaVersion}")
    api("jakarta.json.bind:jakarta.json.bind-api:${jakartaJsonBindVersion}")
    api("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
    api("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")

    api 'gg.jte:jte:2.2.3'

    api("org.slf4j:slf4j-api:${slf4jVersion}")
    api("ch.qos.logback:logback-classic:${logbackVersion}")
    api("org.slf4j:jcl-over-slf4j:${slf4jVersion}")

    // testing
    testImplementation("org.eclipse:yasson:2.0.4") {
        // Exclude Glassfish as we use Parsson (basically Glassfish renamed in the Jakarta namespace).
        exclude(group: "org.glassfish", module: "jakarta.json")
    }

    testImplementation("io.github.classgraph:classgraph:4.8.147")

//    testImplementation 'org.testcontainers:elasticsearch:1.17.6'
    testImplementation 'org.assertj:assertj-core:3.23.1'
    testImplementation "org.junit.jupiter:junit-jupiter-api:${jUnitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${jUnitVersion}"
}



jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled true
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    dependsOn test // tests are required to run before generating the report
}

jacocoBadgeGenSetting {
    jacocoReportPath  "$buildDir/customJacocoReportDir/test/jacocoTestReport.xml"
//    readmePath "$projectDir/README.md"
//    // since v0.2.0, percentage limitation (0-100) for different type of coverage
//    limit = ['instruction': 0, 'branch': 0, 'line': 0, 'method': 0, 'class': 0]
}

test {

    useJUnitPlatform()

    finalizedBy jacocoTestReport // report is always generated after tests run

    filter {
//        excludeTestsMatching "io.*.*.lowlevel.restclient.*"
//        excludeTestsMatching "io.*.*.client._types.*"
        excludeTestsMatching "io.*.*.client.usage.*"
//        excludeTestsMatching "io.*.*.client.transport.*"
    }
}

//tasks.named('taskTree').configure {
//    depth = 3 // limit tree depth to 3. Equivalent to the --depth CLI task option.
//    withInputs = true // prints task inputs in red just below the task in the tree. Equivalent to the --with-inputs CLI task option.
//    withOutputs = true // prints task inputs in red just below the task in the tree. Equivalent to the --with-outputs CLI task option.
//    repeat = true  // allows printing a sub-tree in the task-tree more than once. Equivalent to the --repeat CLI task option
//    impliesSubProjects = true  // disables printing task-tree for child projects in a multi-project
//}
