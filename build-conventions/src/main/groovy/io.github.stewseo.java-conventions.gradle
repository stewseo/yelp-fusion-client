/*****************************************************************************
 *         plugins                                                          *
 *****************************************************************************/

plugins {
    id 'java-library'
    id 'checkstyle'
    id 'com.github.spotbugs'
    id 'jacoco'
    id "org.sonarqube"
    id 'com.github.dawnwords.jacoco.badge'
}

/*****************************************************************************
 *         all java projects                                                 *
 *****************************************************************************/

group = GROUP
version = PROJECT_VERSION

/*****************************************************************************
 *         java                                                             *
 *****************************************************************************/

java {
    targetCompatibility = JavaVersion.VERSION_17
    sourceCompatibility = JavaVersion.VERSION_17
}

tasks.withType(JavaCompile).configureEach {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(17)
    }
    // Enable/Disable deprecation messages when compiling Java code
    options.compilerArgs << '-Xlint:none'
    options.encoding = 'UTF-8'
    if (it.name == 'classesJava17') {
        options.release = 17
    }
}

/*****************************************************************************
 *         checkstyle                                                       *
 *****************************************************************************/

// No Warnings
checkstyle {
    config = resources.text.fromString(io.github.stewseo.CheckstyleUtil.getCheckstyleConfig(CHECKSTYLE_CONFIG))
    maxWarnings = 1
}

/*****************************************************************************
 *         spot bugs                                                        *
 *****************************************************************************/

spotbugs {

    ignoreFailures = false
    showStackTraces = true
    showProgress = false
    reportLevel = 'low'

    // adjusts internal flags of SpotBugs to reduce computation cost by lowering the prediction. min, max, more, max
    effort = 'more'
//    visitors = [ 'FindSqlInjection', 'SwitchFallthrough' ]
//    omitVisitors = [ 'FindNonShortCircuit' ]
    reportsDir = file("$buildDir/reports/spotbugs")
    includeFilter = file('../config/spotbugs/spotbugs-include.xml')
    excludeFilter = file('../config/spotbugs/spotbugs-exclude.xml')
//    onlyAnalyze = ['io.*.*.temporaldata.service.*', 'io.github.stewseo.lowlevel.restclient.*']
    projectName = name
    release = version
    extraArgs = [ '-nested:false' ]
    jvmArgs = [ '-Duser.language=ja' ]
    maxHeapSize = '512m'
}


spotbugsMain {
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

spotbugsTest {
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/test/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

/*****************************************************************************
 *         code coverage                                                     *
 *****************************************************************************/

jacoco {
    toolVersion = "0.8.8"
//    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

//jacocoTestReport {
//    reports {
//        xml.required = false
//        csv.required = false
//        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
//    }
//    dependsOn test // tests are required to run before generating the report
//}

//task codeCoverageReport(type: JacocoReport) {
//
//    // Gather execution data from all subprojects
////    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
//
//    // Add sub project source sets defined in subproject build scripts
//    subprojects.each {
//        sourceSets it.sourceSets.main
//    }
//
//    reports {
//        xml.enabled false
//        csv.enabled false
//        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
//    }
//}

tasks.register("codeCoverageReport", JacocoReport) {
    // If a subproject applies the 'jacoco' plugin, add the result it to the report
    subprojects { subproject ->
        subproject.plugins.withType(JacocoPlugin).configureEach {
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach { testTask ->
                //the jacoco extension may be disabled for some projects
                if (testTask.extensions.getByType(JacocoTaskExtension).isEnabled()) {
                    sourceSets subproject.sourceSets.main
                    executionData(testTask)
                } else {
                    logger.warn('Jacoco extension is disabled for test task \'{}\' in project \'{}\'. this test task will be excluded from jacoco report.', testTask.getName(), subproject.getName())
                }
            }

            // To automatically run `test` every time `./gradlew codeCoverageReport` is called,
            // you may want to set up a task dependency between them as shown below.
            // Note that this requires the `test` tasks to be resolved eagerly (see `forEach`) which
            // may have a negative effect on the configuration time of your build.
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).forEach {
                rootProject.tasks.codeCoverageReport.dependsOn(it)
            }
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectName", name
        property "sonar.projectKey", name
//        property "sonar.verbose", true
        property "sonar.coverage.jacoco.xmlReportPaths",
                "$projectDir.parentFile.path/build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

jacocoBadgeGenSetting {
    jacocoReportPath  "$projectDir.parentFile.path/build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
    readmePath "../README.md"
    // since v0.2.0, percentage limitation (0-100) for different type of coverage
    limit = ['instruction': 0, 'branch': 0, 'line': 0, 'method': 0, 'class': 0]
}

/*****************************************************************************
 *         java-conventions  dependencies                                   *
 *****************************************************************************/

repositories {
    mavenCentral()
}

ext {
    // commons
    commonscodecVersion = '1.11'
    commonsioVersion = '2.4'
    commonsloggingVersion = '1.2'

    // http components
    httpasyncclientVersion = '4.1.5'
    httpcoreVersion = '4.4.12'
    httpclientVersion = '4.5.10'

    // logging
    slf4jVersion = '2.0.4'
    logbackVersion = '1.4.1'

    // testing
    randomizedRunnerVersion = '2.8.1'
    jUnit4Version = '4.13.2'
    hamcrestVersion = '2.2'

    jUnitVersion = "5.9.0"
    assertJVersion = "3.23.1"
}

dependencies {

    configurations.all {
        exclude group: "commons-logging", module: "commons-logging"
    }

    api("commons-io:commons-io:${commonsioVersion}")
    api("commons-codec:commons-codec:${commonscodecVersion}")

    api("org.slf4j:slf4j-api:${slf4jVersion}")
    api("ch.qos.logback:logback-classic:${logbackVersion}")
    api("org.slf4j:jcl-over-slf4j:${slf4jVersion}")

    compileOnly 'javax.annotation:javax.annotation-api:1.3.2'

    testImplementation 'org.assertj:assertj-core:3.23.1'
    testImplementation "org.junit.jupiter:junit-jupiter-api:${jUnitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${jUnitVersion}"
}
