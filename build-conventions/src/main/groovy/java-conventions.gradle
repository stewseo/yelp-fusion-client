import java.nio.charset.StandardCharsets

/*****************************************************************************
 *         plugins                                                          *
 *****************************************************************************/

plugins {
    id 'java-library'
    id 'checkstyle'
    id 'idea'
    id 'com.github.spotbugs'
    id 'integration-tests'
    id 'jacoco'
    id "org.sonarqube"
}


/*****************************************************************************
 *         group and version for java projects                               *
 *****************************************************************************/

group = 'io.github.stewseo'
version = '1.7.6'

/*****************************************************************************
 *         packaging                                                         *
 *****************************************************************************/

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        vendor = JvmVendorSpec.ADOPTIUM
    }

    withSourcesJar()
    withJavadocJar()
}


jar {
    archiveFileName.set(project.name)
    archiveFileName.set(version)

    manifest {
        attributes("Implementation-Title": archiveFileName,
                "Implementation-Version": archiveVersion)
    }

    from {
        configurations.compileClasspath.filter { it.exists() }.collect { it.isDirectory() ? it : zipTree(it) }
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

javadoc.options.addStringOption('Xdoclint:none', '-quiet')

tasks.withType(JavaCompile) {
    javaCompiler.set(javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(17)
    })
    options.deprecation = true
    options.encoding = StandardCharsets.UTF_8
}


/*****************************************************************************
 *         checkstyle                                                       *
 *****************************************************************************/

// No Warnings
checkstyle {
    config = resources.text.fromString(io.github.stewseo.CheckstyleUtil.getCheckstyleConfig("$rootDir/config/checkstyle/checkstyle.xml"))
//    maxWarnings = 0
}

/*****************************************************************************
 *         spot bugs                                                        *
 *****************************************************************************/

spotbugs {
    ignoreFailures = true
    showStackTraces = true
    showProgress = false
    effort = 'default'
    reportsDir = file("${buildDir}/reports/spotbugs")
    // from root directory: config/spotbugs/spotbugs-include.xml
    includeFilter = file("${rootDir}/config/spotbugs/spotbugs-include.xml")
    // from project directory: config/spotbugs/spotbugs-include.xml
    excludeFilter = file("${projectDir}/config/spotbugs/spotbugs-exclude.xml")
}


/*****************************************************************************
 *         code coverage                                                     *
 *****************************************************************************/

jacoco {
    toolVersion = "0.8.8"
}

sonarqube {
    properties {
        property "sonar.projectKey", "stewseo_yelp-fusion-client"
        property "sonar.organization", System.getenv("ORGANIZATION_NAME")
        property "sonar.host.url", SONAR_HOST
        property "sonar.login", System.getenv("SONAR_TOKEN")
    }

}

test.finalizedBy jacocoTestReport

tasks.named('sonarqube').configure {
    dependsOn test
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
}

/*****************************************************************************
 *         java-conventions dependencies                                   *
 *****************************************************************************/

repositories {
    mavenCentral()
}

dependencies {

    configurations.all {
        exclude group: "commons-logging", module: "commons-logging"
    }

    compileOnly buildLibs.spotbugs
    compileOnly buildLibs.javax.annotation.api

    testImplementation buildLibs.assertJ
    testImplementation buildLibs.junit.jupiter.api
    testRuntimeOnly buildLibs.junit.jupiter.engine
}

/*****************************************************************************
 *         testing                                                          *
 *****************************************************************************/

test {
    useJUnitPlatform()
}

tasks.register('printPaths') {
    doLast {
        println "Project name: " + project.name +
                "\nrootDir.path: " + rootDir.path +
                "\nprojectDir path: " + projectDir.path +
                "\nprojectDir: " + projectDir +
                "\nbuildDir path: " + buildDir.path
    }
}
