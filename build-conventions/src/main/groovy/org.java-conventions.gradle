plugins {
    id 'java'
    id 'checkstyle'
    id 'jacoco'
    id 'idea'
    id 'com.github.dawnwords.jacoco.badge'
    id 'com.github.spotbugs'
}

import java.text.SimpleDateFormat

group = 'io.github.stewseo'

//version = file("buildsrc.properties").text.trim()

//task versionTxt()  {
//    doLast {
//        new File(rootProjectDir, "/config/version.txt").text = """
//Version: $version
//Revision: ${grgit.head().abbreviatedId}
//Buildtime: ${new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date())}
//Application-name: yelp-fusion-client
//"""
//    }
//}

java {
    sourceCompatibility = "17"
    targetCompatibility = "17"
}

ext {
    // elasticsearch
    elasticsearchVersion = "8.5.2"

    // json
    jacksonVersion = "2.12.3"
    jakartaVersion = '2.0.1'
    jakartaJsonBindVersion = '2.0.0'
    parssonVersion = '1.0.0'

    // logging
    slf4jVersion = '2.0.4'
    logbackVersion = '1.4.1'

    // testing
    jUnitVersion = "5.9.0"
    assertJVersion = "3.23.1"
}

repositories {
    mavenCentral()
}

dependencies {

}

// No Warnings
checkstyle {
    config = resources.text.fromString(io.github.stewseo.CheckstyleUtil.getCheckstyleConfig("/checkstyle.xml"))
    maxWarnings = 0
}

// Enable deprecation messages when compiling Java code
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << "-Xlint:deprecation"
}


jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled true
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    dependsOn test // tests are required to run before generating the report
}

//// Do not generate reports for individual projects
//tasks.named("jacocoTestReport") {
//    enabled = false
//}
//
//// Share sources output folder with other projects for aggregated JaCoCo reports
//configurations.create('transitiveSourceOutputsElements') {
//    visible = false
//    canBeResolved = false
//    canBeConsumed = true
//    extendsFrom(configurations.implementation)
//    attributes {
//        attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
//        attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
//        attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'source-output-folders'))
//    }
//    // Use main.output if you have groovy, scala or kotlin other than java in your project
//    sourceSets.main.output.classesDirs.forEach {
//        outgoing.artifact(it)
//    }
//}
//
//// Share sources folder with other projects for aggregated JaCoCo reports
//configurations.create('transitiveSourcesElements') {
//    visible = false
//    canBeResolved = false
//    canBeConsumed = true
//    extendsFrom(configurations.implementation)
//    attributes {
//        attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
//        attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
//        attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'source-folders'))
//    }
//    sourceSets.main.output.classesDirs.forEach {
//        outgoing.artifact(it)
//    }
//}
//
//// Share the coverage data to be aggregated for the whole product
//configurations.create('coverageDataElements') {
//    visible = false
//    canBeResolved = false
//    canBeConsumed = true
//    extendsFrom(configurations.implementation)
//    attributes {
//        attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
//        attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
//        attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'jacoco-coverage-data'))
//    }
//    // This will cause the test task to run if the coverage data is requested by the aggregation task
//    outgoing.artifact(tasks.named("test").map { task ->
//        task.extensions.getByType(JacocoTaskExtension).destinationFile
//    })
//}
//
//jacocoBadgeGenSetting {
//    jacocoReportPath  "$buildDir/customJacocoReportDir/test/jacocoTestReport.xml"
//    readmePath "../README.md"
//    // since v0.2.0, percentage limitation (0-100) for different type of coverage
//    limit = ['instruction': 0, 'branch': 0, 'line': 0, 'method': 0, 'class': 0]
//}
